{"version":3,"sources":["Main.js","Favorites.js","App.js","reportWebVitals.js","index.js"],"names":["baseUrl","getAutoComplete","q","key","a","url","fetch","response","json","body","getDaily","cityKey","apikey","getCurent","Main","props","API_KEY","favorites","addToFavorites","removeFavorite","useState","city","setCity","daily","setDaily","suggestions","setSuggestions","dataFetched","setDataFetched","cityAPI","currentWeather","setCurrentWeather","event","value","target","nativeEvent","data","results","selected","find","suggestion","LocalizedName","getFiveDayAPI","Key","getCityAPI","then","res","result","DailyForecasts","getCurrentAPI","useEffect","load","isFavorite","favorite","className","Temperature","Metric","Value","Day","IconPhrase","type","list","placeholder","onChange","id","map","onClick","day","i","Date","toString","split","Math","floor","Maximum","Minimum","Favorites","promises","Promise","all","values","to","replace","App","setFavorites","console","log","exact","path","render","filter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9fea8779.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst baseUrl = \"https://dataservice.accuweather.com\";\r\n\r\nasync function getAutoComplete(q, key) {\r\n\tconst url = `${baseUrl}/locations/v1/cities/autocomplete?apikey=${key}&q=${q}`;\r\n\tconst response = await fetch(url);\r\n\tconst body = await response.json();\r\n\treturn body;\r\n}\r\n\r\nasync function getDaily(cityKey, apikey) {\r\n\tconst url = `${baseUrl}/forecasts/v1/daily/5day/${cityKey}?apikey=${apikey}&metric=true`;\r\n\tconst response = await fetch(url);\r\n\tconst body = await response.json();\r\n\treturn body;\r\n}\r\n\r\nasync function getCurent(cityKey, apikey) {\r\n\tconst url = `${baseUrl}/currentconditions/v1/${cityKey}?apikey=${apikey}&metric=true`\r\n\tconst response = await fetch(url);\r\n\tconst body = await response.json();\r\n\treturn body;\r\n}\r\n\r\nfunction Main(props) {\r\n\tconst { API_KEY, favorites, addToFavorites, removeFavorite } = props;\r\n\tconst [city, setCity] = useState(null);\r\n\tconst [daily, setDaily] = useState([]);\r\n\tconst [suggestions, setSuggestions] = useState([]);\r\n\tconst [dataFetched, setDataFetched] = useState(false);\r\n\tconst cityAPI=`${baseUrl}/locations/v1/cities/search?apikey=${API_KEY}&q=tel aviv`\r\n\tconst [currentWeather, setCurrentWeather] = useState([]);\r\n\r\n\tasync function onSearch(event) {\r\n\t\tconst { value } = event.target;\r\n\t\tif (event.nativeEvent.data) {\r\n\t\t\t// on type in input\r\n\t\t\tconst results = await getAutoComplete(value, API_KEY);\r\n\t\t\tsetSuggestions(results);\r\n\t\t} else {\r\n\t\t\t// on select from datalist\r\n\t\t\tconst selected = suggestions.find((suggestion) => suggestion.LocalizedName === value);\r\n\t\t\tsetCity(selected);\r\n\t\t\tgetFiveDayAPI(selected.Key);\r\n\t\t}\r\n\t}\r\n\r\n\tasync function getCityAPI() {\r\n\t\treturn await fetch(cityAPI)\r\n\t\t\t.then((res) => res.json())\r\n\t\t\t.then((result) => {\r\n\t\t\t\tsetCity(result[0]);\r\n\t\t\t});\r\n\t}\r\n\r\n\tasync function getFiveDayAPI(cityKey = \"215854\") {\r\n\t\treturn await getDaily(cityKey, API_KEY).then((result) => {\r\n\t\t\tsetDaily(result.DailyForecasts);\r\n\t\t});\r\n\t}\r\n\tasync function getCurrentAPI(cityKey = \"215854\") {\r\n\t\treturn await getCurent(cityKey, API_KEY).then((result) => {\r\n\t\t\tsetCurrentWeather(result);\r\n\t\t});\r\n\t}\r\n\tuseEffect(() => {\r\n\t\tasync function load() {\r\n\t\t\ttry {\r\n\t\t\t\tawait getCurrentAPI();\r\n\t\t\t\tawait getCityAPI();\r\n\t\t\t\tawait getFiveDayAPI();\r\n\t\t\t\tsetDataFetched(true);\r\n\t\t\t} catch (error) {\r\n\t\t\t}\r\n\t\t}\r\n\t\tload();\r\n\t}, [cityAPI]);\r\n\r\n\t\r\n\tconst isFavorite = favorites.find((favorite) => favorite.Key === city?.Key);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"Main-top\">\r\n\t\t\t\t<div className=\"Main-Current\">\r\n\t\t\t\t\t<h1>Current weather:</h1>\r\n\t\t\t\t\t{dataFetched ? (\r\n\t\t\t\t\t\t<h1 className=\"current-city\">{favorites[0]?.LocalizedName}</h1>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<p>loading...</p>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{dataFetched ? (\r\n\t\t\t\t\t\t<h2 className=\"current-degree\">\r\n\t\t\t\t\t\t\t{currentWeather[0]?.Temperature?.Metric?.Value}Â°C\r\n\t\t\t\t\t\t</h2>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<p>loading...</p>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{dataFetched ? (\r\n\t\t\t\t\t\t<h1 className=\"current-description\">{daily[0].Day.IconPhrase}</h1>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<p>loading...</p>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"Main-search\">\r\n\t\t\t\t\t<input type=\"text\" list=\"search\" placeholder={\"search weather\"} onChange={onSearch} />\r\n\t\t\t\t\t<datalist id=\"search\">\r\n\t\t\t\t\t\t{suggestions.map((suggestion) => (\r\n\t\t\t\t\t\t\t<option value={suggestion.LocalizedName} />\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</datalist>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"add\"\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tif (isFavorite) return removeFavorite(city);\r\n\t\t\t\t\t\t\taddToFavorites(city);\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t{isFavorite ? \"Remove From favorites\" : \"Add to favorites\"}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t{dataFetched ? (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{daily.map((day, i) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<li key={i}>\r\n\t\t\t\t\t\t\t\t\t<p>{new Date(day.Date).toString().split(\" \")[0]}</p>\r\n\t\t\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\t\t{Math.floor(day?.Temperature?.Maximum?.Value)}Â°C/{Math.floor(day?.Temperature?.Minimum?.Value)}Â°C\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<p>Loading...</p>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Main;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Favorites(props) {\r\n\tconst { API_KEY, favorites } = props;\r\n\r\n\tconst [currentWeather, setCurrentWeather] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst promises = favorites.map((city) => {\r\n\t\t\treturn fetch(\r\n\t\t\t\t`https://dataservice.accuweather.com/currentconditions/v1/${city.Key}?apikey=${API_KEY}&metric=true`\r\n\t\t\t)\r\n\t\t\t\t.then((res) => res.json())\r\n\t\t\t\t.then((body) => body[0]);\r\n\t\t});\r\n\t\tPromise.all(promises).then((values) => {\r\n\t\t\tsetCurrentWeather(values);\r\n\t\t});\r\n\t}, []);\r\n\r\n\t\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t<ul className=\"Favorite-city\">\r\n\t\t\t{favorites.map((city, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<li key={i}>\r\n                        <Link to=\"/Main\" replace><button className=\"Favorites-button\" >\r\n\t\t\t\t\t\t<div>{city.LocalizedName}</div>\r\n\t\t\t\t\t\t<div>{currentWeather[i]?.Temperature.Metric.Value}Â°C</div></button></Link>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</ul></div>\r\n\t);\r\n}\r\n\r\nexport default Favorites;\r\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport { HashRouter as Router, Switch, Route, Redirect, Link } from \"react-router-dom\";\nimport Main from \"./Main\";\nimport Favorites from \"./Favorites\";\n\nfunction App() {\n\tconst [favorites, setFavorites] = useState([]);\n\tconst API_KEY = \"A6pmRGXawgAtZM5Y11NF2ZemuHR9XdPm\";\n\n\tfunction addToFavorites(favorite) {\n\t\tsetFavorites([favorite, ...favorites]);\n\t}\n\n\tfunction removeFavorite(favorite) {\n\t\tsetFavorites(favorites.filter((city) => favorite.Key !== city.Key));\n\t}\n\n\t\n\n\tconsole.log(\"favorites\", favorites);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Router>\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<Link to=\"/Main\" replace>\n\t\t\t\t\t\t<button className=\"App-main-button\">Main Page</button>\n\t\t\t\t\t</Link>\n\t\t\t\t\t<Link to=\"/Favorites\" replace>\n\t\t\t\t\t\t<button className=\"App-fav-button\">Favorites</button>\n\t\t\t\t\t</Link>\n\t\t\t\t</header>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route\n\t\t\t\t\t\texact\n\t\t\t\t\t\tpath=\"/\"\n\t\t\t\t\t\trender={() => {\n\t\t\t\t\t\t\treturn <Redirect to=\"/Main\" />;\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route exact path=\"/Main\">\n\t\t\t\t\t\t<Main\n\t\t\t\t\t\t\tAPI_KEY={API_KEY}\n\t\t\t\t\t\t\tfavorites={favorites}\n\t\t\t\t\t\t\tremoveFavorite={removeFavorite}\n\t\t\t\t\t\t\taddToFavorites={addToFavorites}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path=\"/Favorites\">\n\t\t\t\t\t\t<Favorites\n\t\t\t\t\t\t\tAPI_KEY={API_KEY}\n\t\t\t\t\t\t\tfavorites={favorites}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}