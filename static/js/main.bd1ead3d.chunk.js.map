{"version":3,"sources":["DailyAtom.js","Main.js","Favorites.js","App.js","reportWebVitals.js","index.js"],"names":["dailyAtom","atom","key","default","cityKeyAtom","cityNameAtom","tempAtom","baseUrl","getAutoComplete","q","a","url","fetch","response","json","body","getDaily","cityKey","apikey","getCurent","getCity","Main","props","API_KEY","favorites","addToFavorites","removeFavorite","useState","city","setCity","useRecoilState","daily","setDaily","currentCityKey","useRecoilValue","cityName","setCityName","temp","setTemp","suggestions","setSuggestions","dataFetched","setDataFetched","event","value","target","nativeEvent","data","results","selected","find","suggestion","LocalizedName","getFiveDayAPI","Key","getCurrentAPI","then","result","Temperature","Metric","Value","API_REAL_KEY","DailyForecasts","getCityAPI","useEffect","load","isFavorite","favorite","className","Day","IconPhrase","type","list","placeholder","onChange","id","map","onClick","day","i","Date","toString","split","Math","floor","Maximum","Minimum","Favorites","createSelected","currentWeather","setCurrentWeather","setCityKey","useSetRecoilState","history","useHistory","promises","res","Promise","all","values","handleClick","current","c","push","App","setFavorites","setSelected","console","log","to","replace","exact","path","render","filter","CreateSelected","selectedItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd1ead3d.chunk.js","sourcesContent":["import { atom } from 'recoil';\r\n\r\nexport const dailyAtom = atom({\r\n    key: 'dailyAtom',\r\n    default: []\r\n});\r\n\r\nexport const cityKeyAtom = atom({\r\n    key: 'cityKey',\r\n    default: \"215854\"\r\n});\r\n\r\nexport const cityNameAtom = atom({\r\n    key: 'cityName',\r\n    default: 'Tel Aviv'\r\n});\r\n\r\nexport const tempAtom = atom({\r\n    key: 'tempAtom',\r\n    default: '28'\r\n})","import React, { useEffect, useState } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { cityKeyAtom, dailyAtom, cityNameAtom, tempAtom } from './DailyAtom';\r\nimport {API_REAL_KEY} from './App';\r\n\r\nconst baseUrl = \"https://dataservice.accuweather.com\";\r\n\r\nasync function getAutoComplete(q, key) {\r\n\tconst url = `${baseUrl}/locations/v1/cities/autocomplete?apikey=${key}&q=${q}`;\r\n\tconst response = await fetch(url);\r\n\tconst body = await response.json();\r\n\treturn body;\r\n}\r\n\r\nasync function getDaily(cityKey, apikey) {\r\n\tconst url = `${baseUrl}/forecasts/v1/daily/5day/${cityKey}?apikey=${apikey}&metric=true`;\r\n\tconst response = await fetch(url);\r\n\tconst body = await response.json();\r\n\treturn body;\r\n}\r\n\r\nasync function getCurent(cityKey, apikey) {\r\n\tconst url = `${baseUrl}/currentconditions/v1/${cityKey}?apikey=${apikey}&metric=true`\r\n\tconst response = await fetch(url);\r\n\tconst body = await response.json();\r\n\treturn body;\r\n}\r\n\r\nasync function getCity(apikey) {\r\n\tconst url = `${baseUrl}/locations/v1/cities/search?apikey=${apikey}&q=tel aviv`\r\n\tconst response = await fetch(url);\r\n\tconst body = await response.json();\r\n\treturn body;\r\n}\r\n\r\n\r\nfunction Main(props) {\r\n\tconst { API_KEY, favorites, addToFavorites, removeFavorite } = props;\r\n\tconst [city, setCity] = useState(null);\r\n\tconst [daily, setDaily] = useRecoilState(dailyAtom);\r\n\tconst currentCityKey = useRecoilValue(cityKeyAtom);\r\n\tconst [cityName, setCityName] = useRecoilState(cityNameAtom);\r\n\tconst [temp, setTemp] = useRecoilState(tempAtom);\r\n\tconst [suggestions, setSuggestions] = useState([]);\r\n\tconst [dataFetched, setDataFetched] = useState(false);\r\n\tconst cityAPI=`${baseUrl}/locations/v1/cities/search?apikey=${API_KEY}&q=tel aviv`\r\n\tconst [currentWeather, setCurrentWeather] = useState([]);\r\n\r\n\tasync function onSearch(event) {\r\n\t\tconst { value } = event.target;\r\n\t\tif (event.nativeEvent.data) {\r\n\t\t\t// on type in input\r\n\t\t\tconst results = await getAutoComplete(value, API_KEY);\r\n\t\t\tsetSuggestions(results);\r\n\t\t} else {\r\n\t\t\t// on select from datalist\r\n\t\t\tconst selected = suggestions.find((suggestion) => suggestion.LocalizedName === value);\r\n\t\t\tsetCity(selected);\r\n\t\t\tsetCityName(selected?.LocalizedName);\r\n\t\t\tgetFiveDayAPI(selected?.Key);\r\n\t\t\tgetCurrentAPI(selected?.Key);\r\n\t\t}\r\n\t}\r\n\r\n\tasync function getCurrentAPI(cityKey = \"215854\") {\r\n\t\treturn await getCurent(cityKey, API_KEY).then((result) => {\r\n\t\t\t\r\n\t\t\tsetTemp(result[0].Temperature.Metric.Value);\r\n\t\t});\r\n\t}\r\n\r\n\tasync function getFiveDayAPI(cityKey = \"215854\") {\r\n\t\treturn await getDaily(cityKey, API_REAL_KEY).then((result) => {\r\n\t\t\tsetDaily(result.DailyForecasts);\r\n\t\t});\r\n\t}\r\n\r\n\tasync function getCityAPI() {\r\n\t\treturn await getCity(API_KEY).then((result) => {\r\n\t\t\tsetCity(result[0]);\r\n\t\t\t});\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tasync function load() {\r\n\t\t\ttry {\r\n\t\t\t\tawait getCurrentAPI(currentCityKey);\r\n\t\t\t\tawait getCityAPI();\r\n\t\t\t\tawait getFiveDayAPI(currentCityKey, setDaily);\r\n\t\t\t\tsetDataFetched(true);\r\n\t\t\t} catch (error) {\r\n\t\t\t}\r\n\t\t}\r\n\t\tload();\t\t\r\n\t}, [currentCityKey]);\r\n\t\r\n\t\r\n\tconst isFavorite = favorites.find((favorite) => favorite.Key === city?.Key);\r\n\t\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"Main-top\">\r\n\t\t\t\t<div className=\"Main-Current\">\r\n\t\t\t\t\t<h1>Current weather:</h1>\r\n\t\t\t\t\t{dataFetched ? (\r\n\t\t\t\t\t\t<h1 className=\"current-city\">{cityName}</h1>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<p>loading...</p>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{dataFetched ? (\r\n\t\t\t\t\t\t<h2 className=\"current-degree\">\r\n\t\t\t\t\t\t\t{temp}°C\r\n\t\t\t\t\t\t</h2>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<p>loading...</p>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{dataFetched ? (\r\n\t\t\t\t\t\t<h1 className=\"current-description\">{daily[0].Day.IconPhrase}</h1>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<p>loading...</p>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"Main-search\">\r\n\t\t\t\t\t<input type=\"text\" list=\"search\" placeholder={\"search weather\"} onChange={onSearch} />\r\n\t\t\t\t\t<datalist id=\"search\">\r\n\t\t\t\t\t\t{suggestions.map((suggestion) => (\r\n\t\t\t\t\t\t\t<option value={suggestion.LocalizedName} />\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</datalist>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"add\"\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tif (isFavorite) return removeFavorite(city);\r\n\t\t\t\t\t\t\taddToFavorites(city);\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t{isFavorite ? \"Remove From favorites\" : \"Add to favorites\"}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t{dataFetched ? (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{daily.map((day, i) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<li key={i}>\r\n\t\t\t\t\t\t\t\t\t<p>{new Date(day.Date).toString().split(\" \")[0]}</p>\r\n\t\t\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\t\t{Math.floor(day?.Temperature?.Maximum?.Value)}°C/{Math.floor(day?.Temperature?.Minimum?.Value)}°C\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<p>Loading...</p>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Main;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { cityKeyAtom, cityNameAtom, tempAtom } from './DailyAtom.js';\r\n\r\nfunction Favorites(props) {\r\n\tconst { API_KEY, favorites, createSelected, selected } = props;\r\n\r\n\tconst [currentWeather, setCurrentWeather] = useState([]);\r\n\tconst setCityKey = useSetRecoilState(cityKeyAtom);\r\n\tconst setCityName = useSetRecoilState(cityNameAtom);\r\n\tconst setTemp = useSetRecoilState(tempAtom);\r\n\tconst history = useHistory();\r\n\r\n\tuseEffect(() => {\r\n\t\tconst promises = favorites.map((city) => {\r\n\t\t\treturn fetch(\r\n\t\t\t\t`https://dataservice.accuweather.com/currentconditions/v1/${city.Key}?apikey=${API_KEY}&metric=true`\r\n\t\t\t)\r\n\t\t\t\t.then((res) => res.json())\r\n\t\t\t\t.then((body) => ({...body[0], cityKey: city.Key }));\r\n\t\t});\r\n\t\tPromise.all(promises).then((values) => {\r\n\t\t\tsetCurrentWeather(values);\r\n\t\t});\r\n\t}, []);\r\n\t\r\n\tconst handleClick = (city, i) => () => {\r\n\t\tsetCityKey(city.Key);\r\n\t\tsetCityName(city.LocalizedName);\r\n\t\tconst current = currentWeather.find(c => c.cityKey == city.Key);\r\n\t\tsetTemp(current.Temperature.Metric.Value);\r\n\t\thistory.push('/Main');\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t<ul className=\"Favorite-city\">\r\n\t\t\t{favorites.map((city, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<li key={i}>\r\n\t\t\t\t\t\t<button className=\"Favorites-button\" onClick={handleClick(city, i)}  >\r\n\t\t\t\t\t\t\t<div>{city.LocalizedName}</div>\r\n\t\t\t\t\t\t\t<div>{currentWeather[i]?.Temperature.Metric.Value}°C</div>\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</ul></div>\r\n\t);\r\n}\r\n\r\nexport default Favorites;\r\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport { HashRouter as Router, Switch, Route, Redirect, Link } from \"react-router-dom\";\nimport Main from \"./Main\";\nimport Favorites from \"./Favorites\";\nimport { RecoilRoot } from 'recoil';\n\nexport const API_REAL_KEY = '1OrCeGopCU91ifzqpcKcGxsrBllpdMw0';\n\nfunction App() {\n\tconst [favorites, setFavorites] = useState([]);\n\tconst [selected, setSelected] = useState([])\n\tconst API_KEY = \"1OrCeGopCU91ifzqpcKcGxsrBllpdMw0\";\n\n\tfunction addToFavorites(favorite) {\n\t\tsetFavorites((current) => [...current, favorite]);\n\t}\n\n\tfunction removeFavorite(favorite) {\n\t\tsetFavorites((current) => current.filter((city) => favorite.Key !== city.Key));\n\t}\n\n\tfunction createSelected(selectedItem) {\n\t\tsetSelected([selectedItem]);\n\t}\n\n\tconsole.log(\"favorites\", favorites);\n\tconsole.log('selected', selected);\n\treturn (\n\t\t<RecoilRoot>\n\t\t<div className=\"App\">\n\t\t\t<Router>\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<Link to=\"/Main\" replace>\n\t\t\t\t\t\t<button className=\"App-main-button\">Main Page</button>\n\t\t\t\t\t</Link>\n\t\t\t\t\t<Link to=\"/Favorites\" replace>\n\t\t\t\t\t\t<button className=\"App-fav-button\">Favorites</button>\n\t\t\t\t\t</Link>\n\t\t\t\t</header>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route\n\t\t\t\t\t\texact\n\t\t\t\t\t\tpath=\"/\"\n\t\t\t\t\t\trender={() => {\n\t\t\t\t\t\t\treturn <Redirect to=\"/Main\" />;\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route exact path=\"/Main\">\n\t\t\t\t\t\t<Main\n\t\t\t\t\t\t\tAPI_KEY={API_KEY}\n\t\t\t\t\t\t\tfavorites={favorites}\n\t\t\t\t\t\t\tselected={selected}\n\t\t\t\t\t\t\tremoveFavorite={removeFavorite}\n\t\t\t\t\t\t\taddToFavorites={addToFavorites}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path=\"/Favorites\">\n\t\t\t\t\t\t<Favorites\n\t\t\t\t\t\t\tAPI_KEY={API_KEY}\n\t\t\t\t\t\t\tfavorites={favorites}\n\t\t\t\t\t\t\tCreateSelected={createSelected}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t</div>\n\t\t</RecoilRoot>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}